name: "main action"
description: "Main template action"

inputs:
  app_name:
    description: "App name"
    required: true
  ecr_registry:
    description: "ECR registry"
    required: true
  aws_access_key_id:
    description: "AWS access key ID"
    required: true
  aws_secret_access_key:
    description: "AWS secret access key"
    required: true
  gh_ssh_key:
    description: "GitHub SSH key"
    required: true
  gh_token:
    description: "GitHub token"
    required: true
  git_user_name:
    description: "Git user name"
    required: true
  gh_user_email:
    description: "Git user email"
    required: true
runs:
  using: "composite"
  steps:
  - name: Setup Node.js
    uses: actions/setup-node@v1
    with:
      node-version: 14
  - name: Add plugin for conventional commits
    shell: bash
    run: npm install conventional-changelog-conventionalcommits
    working-directory: ./.github/workflows
  - name: Get Next Release Version
    shell: bash
    id: get-next-release-version
    working-directory: ./.github/workflows
    env:
      GITHUB_TOKEN: ${{ inputs.gh_token }}
    run: echo "::set-output name=next_version::$(npx semantic-release --dry-run | grep 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')"
  - name: Check Next Release Version
    shell: bash
    run: if [ -z "${{ steps.get-next-release-version.outputs.next_version }}" ]; then echo "No release version for this commit"; exit 1; fi
  - name: Set up QEMU
    uses: docker/setup-qemu-action@v1
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1
  - name: Login to ECR
    uses: docker/login-action@v1
    with:
      registry: ${{ inputs.ecr_registry }}
      username: ${{ inputs.aws_access_key_id }}
      password: ${{ inputs.aws_secret_access_key }}
  - name: Set commit short sha
    shell: bash
    id: commit
    run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
  - name: Build and push container image
    uses: docker/build-push-action@v2
    with:
      push: true
      tags: |
        ${{ inputs.ecr_registry }}/${{ inputs.app_name }}:latest
        ${{ inputs.ecr_registry }}/${{ inputs.app_name }}:master-${{ steps.commit.outputs.sha_short }}
        ${{ inputs.ecr_registry }}/${{ inputs.app_name }}:${{ steps.get-next-release-version.outputs.next_version }}
      cache-from: type=gha
      cache-to: type=gha,mode=max
      build-args: GITHUB_SSH_KEY=${{ inputs.gh_ssh_key }}
  - name: Release to GitHub
    shell: bash
    working-directory: ./.github/workflows
    env:
      GITHUB_TOKEN: ${{ inputs.gh_token }}
      GIT_AUTHOR_NAME: ${{ inputs.git_user_name }}  
      GIT_AUTHOR_EMAIL: ${{ inputs.git_user_email }}
      GIT_COMMITTER_NAME: ${{ inputs.git_user_name }}
      GIT_COMMITTER_EMAIL: ${{ inputs.git_user_email }}
    run: npx semantic-release
  - name: Promote to production
    shell: bash
    run: |
      set -e
      git clone https://${{ inputs.gh_token }}@github.com/cargox/production
      cd production
      cat apps/${{ inputs.app_name }}.yaml | sed '/tag:/s/".*"/"${{ steps.get-next-release-version.outputs.next_version }}"/' | sed '/hash:/s/".*"/"'"$(xxd -l 8 -c 8 -p < /dev/urandom)"'"/' | tee apps/${{ inputs.app_name }}-changed.yaml
      mv apps/${{ inputs.app_name }}-changed.yaml apps/${{ inputs.app_name }}.yaml
      git config user.name "${{ inputs.git_user_name }}"
      git config user.email "${{ inputs.git_user_email }}"
      git add apps/${{ inputs.app_name }}.yaml
      git diff-index --quiet HEAD || git commit -m "Upgraded ${{ inputs.app_name }} with the tag ${{ steps.get-next-release-version.outputs.next_version }}"
      git push